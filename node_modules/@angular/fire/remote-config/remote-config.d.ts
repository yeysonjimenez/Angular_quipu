import { NgZone, InjectionToken } from '@angular/core';
import { Observable, OperatorFunction, MonoTypeOperatorFunction } from 'rxjs';
import { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';
import { remoteConfig } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export interface ConfigTemplate {
    [key: string]: string | number | boolean;
}
export declare const SETTINGS: InjectionToken<remoteConfig.Settings>;
export declare const DEFAULTS: InjectionToken<ConfigTemplate>;
declare type RemoteConfigProxy = {
    activate: () => Promise<boolean>;
    ensureInitialized: () => Promise<void>;
    fetch: () => Promise<void>;
    fetchAndActivate: () => Promise<boolean>;
    getAll: () => Promise<{
        [key: string]: remoteConfig.Value;
    }>;
    getBoolean: (key: string) => Promise<boolean>;
    getNumber: (key: string) => Promise<number>;
    getString: (key: string) => Promise<string>;
    getValue: (key: string) => Promise<remoteConfig.Value>;
    setLogLevel: (logLevel: remoteConfig.LogLevel) => Promise<void>;
    settings: Promise<remoteConfig.Settings>;
    defaultConfig: Promise<{
        [key: string]: string | number | boolean;
    }>;
    fetchTimeMillis: Promise<number>;
    lastFetchStatus: Promise<remoteConfig.FetchStatus>;
};
export interface AngularFireRemoteConfig extends RemoteConfigProxy {
}
export declare class Value implements Partial<remoteConfig.Value> {
    _source: remoteConfig.ValueSource;
    _value: string;
    asBoolean(): boolean;
    asString(): string;
    asNumber(): number;
    getSource(): remoteConfig.ValueSource;
    constructor(_source: remoteConfig.ValueSource, _value: string);
}
export declare class Parameter extends Value {
    key: string;
    fetchTimeMillis: number;
    constructor(key: string, fetchTimeMillis: number, source: remoteConfig.ValueSource, value: string);
}
export declare const filterRemote: () => MonoTypeOperatorFunction<Parameter | Parameter[]>;
export declare const filterFresh: (howRecentInMillis: number) => MonoTypeOperatorFunction<Parameter | Parameter[]>;
export declare class AngularFireRemoteConfig {
    private zone;
    readonly changes: Observable<Parameter>;
    readonly parameters: Observable<Parameter[]>;
    readonly numbers: Observable<{
        [key: string]: number | undefined;
    }> & {
        [key: string]: Observable<number>;
    };
    readonly booleans: Observable<{
        [key: string]: boolean | undefined;
    }> & {
        [key: string]: Observable<boolean>;
    };
    readonly strings: Observable<{
        [key: string]: string | undefined;
    }> & {
        [key: string]: Observable<string | undefined>;
    };
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, settings: remoteConfig.Settings | null, defaultConfig: ConfigTemplate | null, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireRemoteConfig, [null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AngularFireRemoteConfig>;
}
export declare const budget: <T>(interval: number) => MonoTypeOperatorFunction<T>;
export declare function scanToObject(): OperatorFunction<Parameter, {
    [key: string]: string | undefined;
}>;
export declare function scanToObject(to: 'numbers'): OperatorFunction<Parameter, {
    [key: string]: number | undefined;
}>;
export declare function scanToObject(to: 'booleans'): OperatorFunction<Parameter, {
    [key: string]: boolean | undefined;
}>;
export declare function scanToObject(to: 'strings'): OperatorFunction<Parameter, {
    [key: string]: string | undefined;
}>;
export declare function scanToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter, T & {
    [key: string]: string | undefined;
}>;
export declare function mapToObject(): OperatorFunction<Parameter[], {
    [key: string]: string | undefined;
}>;
export declare function mapToObject(to: 'numbers'): OperatorFunction<Parameter[], {
    [key: string]: number | undefined;
}>;
export declare function mapToObject(to: 'booleans'): OperatorFunction<Parameter[], {
    [key: string]: boolean | undefined;
}>;
export declare function mapToObject(to: 'strings'): OperatorFunction<Parameter[], {
    [key: string]: string | undefined;
}>;
export declare function mapToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter[], T & {
    [key: string]: string | undefined;
}>;
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJyZW1vdGUtY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPcGVyYXRvckZ1bmN0aW9uLCBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpcmViYXNlQXBwQ29uZmlnLCBGaXJlYmFzZU9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IHJlbW90ZUNvbmZpZyB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1RlbXBsYXRlIHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgU0VUVElOR1M6IEluamVjdGlvblRva2VuPHJlbW90ZUNvbmZpZy5TZXR0aW5ncz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBERUZBVUxUUzogSW5qZWN0aW9uVG9rZW48Q29uZmlnVGVtcGxhdGU+O1xuZGVjbGFyZSB0eXBlIFJlbW90ZUNvbmZpZ1Byb3h5ID0ge1xuICAgIGFjdGl2YXRlOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIGVuc3VyZUluaXRpYWxpemVkOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGZldGNoOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGZldGNoQW5kQWN0aXZhdGU6ICgpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gICAgZ2V0QWxsOiAoKSA9PiBQcm9taXNlPHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogcmVtb3RlQ29uZmlnLlZhbHVlO1xuICAgIH0+O1xuICAgIGdldEJvb2xlYW46IChrZXk6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICBnZXROdW1iZXI6IChrZXk6IHN0cmluZykgPT4gUHJvbWlzZTxudW1iZXI+O1xuICAgIGdldFN0cmluZzogKGtleTogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz47XG4gICAgZ2V0VmFsdWU6IChrZXk6IHN0cmluZykgPT4gUHJvbWlzZTxyZW1vdGVDb25maWcuVmFsdWU+O1xuICAgIHNldExvZ0xldmVsOiAobG9nTGV2ZWw6IHJlbW90ZUNvbmZpZy5Mb2dMZXZlbCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBzZXR0aW5nczogUHJvbWlzZTxyZW1vdGVDb25maWcuU2V0dGluZ3M+O1xuICAgIGRlZmF1bHRDb25maWc6IFByb21pc2U8e1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xuICAgIH0+O1xuICAgIGZldGNoVGltZU1pbGxpczogUHJvbWlzZTxudW1iZXI+O1xuICAgIGxhc3RGZXRjaFN0YXR1czogUHJvbWlzZTxyZW1vdGVDb25maWcuRmV0Y2hTdGF0dXM+O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckZpcmVSZW1vdGVDb25maWcgZXh0ZW5kcyBSZW1vdGVDb25maWdQcm94eSB7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBWYWx1ZSBpbXBsZW1lbnRzIFBhcnRpYWw8cmVtb3RlQ29uZmlnLlZhbHVlPiB7XG4gICAgX3NvdXJjZTogcmVtb3RlQ29uZmlnLlZhbHVlU291cmNlO1xuICAgIF92YWx1ZTogc3RyaW5nO1xuICAgIGFzQm9vbGVhbigpOiBib29sZWFuO1xuICAgIGFzU3RyaW5nKCk6IHN0cmluZztcbiAgICBhc051bWJlcigpOiBudW1iZXI7XG4gICAgZ2V0U291cmNlKCk6IHJlbW90ZUNvbmZpZy5WYWx1ZVNvdXJjZTtcbiAgICBjb25zdHJ1Y3Rvcihfc291cmNlOiByZW1vdGVDb25maWcuVmFsdWVTb3VyY2UsIF92YWx1ZTogc3RyaW5nKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhcmFtZXRlciBleHRlbmRzIFZhbHVlIHtcbiAgICBrZXk6IHN0cmluZztcbiAgICBmZXRjaFRpbWVNaWxsaXM6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgZmV0Y2hUaW1lTWlsbGlzOiBudW1iZXIsIHNvdXJjZTogcmVtb3RlQ29uZmlnLlZhbHVlU291cmNlLCB2YWx1ZTogc3RyaW5nKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZpbHRlclJlbW90ZTogKCkgPT4gTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciB8IFBhcmFtZXRlcltdPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZpbHRlckZyZXNoOiAoaG93UmVjZW50SW5NaWxsaXM6IG51bWJlcikgPT4gTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciB8IFBhcmFtZXRlcltdPjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlUmVtb3RlQ29uZmlnIHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcmVhZG9ubHkgY2hhbmdlczogT2JzZXJ2YWJsZTxQYXJhbWV0ZXI+O1xuICAgIHJlYWRvbmx5IHBhcmFtZXRlcnM6IE9ic2VydmFibGU8UGFyYW1ldGVyW10+O1xuICAgIHJlYWRvbmx5IG51bWJlcnM6IE9ic2VydmFibGU8e1xuICAgICAgICBba2V5OiBzdHJpbmddOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgfT4gJiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgICB9O1xuICAgIHJlYWRvbmx5IGJvb2xlYW5zOiBPYnNlcnZhYmxlPHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICB9PiAmIHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICB9O1xuICAgIHJlYWRvbmx5IHN0cmluZ3M6IE9ic2VydmFibGU8e1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgfT4gJiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPjtcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIHNldHRpbmdzOiByZW1vdGVDb25maWcuU2V0dGluZ3MgfCBudWxsLCBkZWZhdWx0Q29uZmlnOiBDb25maWdUZW1wbGF0ZSB8IG51bGwsIHpvbmU6IE5nWm9uZSk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBidWRnZXQ6IDxUPihpbnRlcnZhbDogbnVtYmVyKSA9PiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzY2FuVG9PYmplY3QoKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXIsIHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNjYW5Ub09iamVjdCh0bzogJ251bWJlcnMnKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXIsIHtcbiAgICBba2V5OiBzdHJpbmddOiBudW1iZXIgfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNjYW5Ub09iamVjdCh0bzogJ2Jvb2xlYW5zJyk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyLCB7XG4gICAgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2NhblRvT2JqZWN0KHRvOiAnc3RyaW5ncycpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciwge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2NhblRvT2JqZWN0PFQgZXh0ZW5kcyBDb25maWdUZW1wbGF0ZT4odGVtcGxhdGU6IFQpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciwgVCAmIHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG1hcFRvT2JqZWN0KCk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyW10sIHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG1hcFRvT2JqZWN0KHRvOiAnbnVtYmVycycpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlcltdLCB7XG4gICAgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBtYXBUb09iamVjdCh0bzogJ2Jvb2xlYW5zJyk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyW10sIHtcbiAgICBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBtYXBUb09iamVjdCh0bzogJ3N0cmluZ3MnKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXJbXSwge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbWFwVG9PYmplY3Q8VCBleHRlbmRzIENvbmZpZ1RlbXBsYXRlPih0ZW1wbGF0ZTogVCk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyW10sIFQgJiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQge307XG4iXX0=