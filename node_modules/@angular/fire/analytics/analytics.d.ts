import { NgZone, InjectionToken } from '@angular/core';
import { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';
import { analytics, app } from 'firebase';
import * as ɵngcc0 from '@angular/core';
export interface Config {
    [key: string]: any;
}
export declare const COLLECTION_ENABLED: InjectionToken<boolean>;
export declare const APP_VERSION: InjectionToken<string>;
export declare const APP_NAME: InjectionToken<string>;
export declare const DEBUG_MODE: InjectionToken<boolean>;
export declare const CONFIG: InjectionToken<Config>;
declare type AnalyticsProxy = {
    logEvent(eventName: string, eventParams?: {
        [key: string]: any;
    }, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setCurrentScreen(screenName: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserId(id: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserProperties(properties: analytics.CustomParams, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setAnalyticsCollectionEnabled(enabled: boolean): Promise<void>;
    app: Promise<app.App>;
};
export interface AngularFireAnalytics extends AnalyticsProxy {
}
export declare class AngularFireAnalytics {
    private options;
    private gtag;
    private analyticsInitialized;
    updateConfig(config: Config): Promise<void>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, analyticsCollectionEnabled: boolean | null, providedAppVersion: string | null, providedAppName: string | null, debugModeEnabled: boolean | null, providedConfig: Config | null, platformId: Object, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAnalytics, [null, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, null, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AngularFireAnalytics>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl0aWNzLmQudHMiLCJzb3VyY2VzIjpbImFuYWx5dGljcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBDb25maWcsIEZpcmViYXNlT3B0aW9ucyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IHsgYW5hbHl0aWNzLCBhcHAgfSBmcm9tICdmaXJlYmFzZSc7XG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgQ09MTEVDVElPTl9FTkFCTEVEOiBJbmplY3Rpb25Ub2tlbjxib29sZWFuPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEFQUF9WRVJTSU9OOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQVBQX05BTUU6IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBERUJVR19NT0RFOiBJbmplY3Rpb25Ub2tlbjxib29sZWFuPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IENPTkZJRzogSW5qZWN0aW9uVG9rZW48Q29uZmlnPjtcbmRlY2xhcmUgdHlwZSBBbmFseXRpY3NQcm94eSA9IHtcbiAgICBsb2dFdmVudChldmVudE5hbWU6IHN0cmluZywgZXZlbnRQYXJhbXM/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9LCBvcHRpb25zPzogYW5hbHl0aWNzLkFuYWx5dGljc0NhbGxPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcbiAgICBzZXRDdXJyZW50U2NyZWVuKHNjcmVlbk5hbWU6IHN0cmluZywgb3B0aW9ucz86IGFuYWx5dGljcy5BbmFseXRpY3NDYWxsT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0VXNlcklkKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbmFseXRpY3MuQW5hbHl0aWNzQ2FsbE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldFVzZXJQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IGFuYWx5dGljcy5DdXN0b21QYXJhbXMsIG9wdGlvbnM/OiBhbmFseXRpY3MuQW5hbHl0aWNzQ2FsbE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuICAgIGFwcDogUHJvbWlzZTxhcHAuQXBwPjtcbn07XG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlQW5hbHl0aWNzIGV4dGVuZHMgQW5hbHl0aWNzUHJveHkge1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVBbmFseXRpY3Mge1xuICAgIHByaXZhdGUgb3B0aW9ucztcbiAgICBwcml2YXRlIGd0YWc7XG4gICAgcHJpdmF0ZSBhbmFseXRpY3NJbml0aWFsaXplZDtcbiAgICB1cGRhdGVDb25maWcoY29uZmlnOiBDb25maWcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIGFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkOiBib29sZWFuIHwgbnVsbCwgcHJvdmlkZWRBcHBWZXJzaW9uOiBzdHJpbmcgfCBudWxsLCBwcm92aWRlZEFwcE5hbWU6IHN0cmluZyB8IG51bGwsIGRlYnVnTW9kZUVuYWJsZWQ6IGJvb2xlYW4gfCBudWxsLCBwcm92aWRlZENvbmZpZzogQ29uZmlnIHwgbnVsbCwgcGxhdGZvcm1JZDogT2JqZWN0LCB6b25lOiBOZ1pvbmUpO1xufVxuZXhwb3J0IHt9O1xuIl19